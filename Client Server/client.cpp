//PROJECT NAME:TCP Client Server applicaton
//NAME: RAHUL SHINDE         ID:006948956
//COURSE: 511
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//The Client File that responds according to the server input.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//CHANGE LOG:
//
//INTIALS	         DATE					   CHANGES
//kj		       11/02/2014				basic client
//kj			   11/05/2014				message passing		
//rs		       11/11/2014				comparision
//tp			   11/12/2014				working finalised
//ad			   11/13/2014				documentation finalised
// NOTE: use g++ -std=c++11 <filename.cpp> while compiling
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <unistd.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <dirent.h>

using namespace std;

int main()//entry point of program
{
  int clientSocket, choice;
  char buffer[1024];
  struct sockaddr_in serverAddr;
  socklen_t addr_size;
  bool toContinue = true;

  time_t t;
  string str = "";
  struct tm * now;
  string ss = "";
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Create the socket. 
//in: 1) Internet domain 2) Stream socket 3) Default protocol (TCP in this case)
//out: socket established.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  clientSocket = socket(PF_INET, SOCK_STREAM, 0);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Configure settings of server address struct
//in: Address family = Internet
//out: server family updated
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
serverAddr.sin_family = AF_INET;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Set port number
//in: using htons function to use proper byte order
//out: server port updated
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  serverAddr.sin_port = htons(7891);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Set ip address to local host
//in: "self" ip address 
//out: ip address updated
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
 serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Set padding bits
//in: size of server address range
//out: memset updated
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);  


 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Creates a new socket
//in: welcomeSocket and socket address and size
//out:socket established.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  addr_size = sizeof serverAddr;
  connect(clientSocket, (struct sockaddr *) &serverAddr, addr_size);

	

  while(toContinue)
{
	
	printf("\n---------------------------------\n");
	recv(clientSocket, buffer, 1024, 0);
	string s(buffer, 3);	// Getting option
	string sss(buffer);
	sss.substr(0,3);

	if(strcmp(buffer, "<end>")==0)//exits the program
	{
		printf("\nExiting\n\n");
		toContinue = false;
	} 
	if(strcmp(s.c_str(), "<1>")==0)//option 1 is compared 
	{
		cout << endl << "IP address and port: " << endl;
		cout << "Client Socket: " << clientSocket << endl << "Connected to server on port: " << (int)serverAddr.sin_port << endl << "Server IP address: " << inet_ntoa(serverAddr.sin_addr) << endl;
			
	}
	 else if(strcmp(s.c_str(), "<2>")==0)//option 2 is compared 
	{
		cout << endl << endl << "Date & Time on Server:";
		printf("%s", buffer);
	} 
	else if(strcmp(buffer, "<3>")==0)//option 3 is compared 
	{
		cout << endl << endl << "Kill Client: " << buffer << endl;
		toContinue = false;
	} 
	else if(strcmp(s.c_str(), "<4>")==0)//option 4 is compared 
	{
		cout << endl << endl << "Get Directory listing:" << buffer;
	} 
	else if(strcmp(buffer, "<5>")==0) //option 5 compared 
	{
		cout << "Client Date & Time: " << endl;
			str = "";
			t = time(0); 
			now = localtime( & t );
			str.append("Date: ");
			str.append(to_string(now->tm_mon + 1));
			str.append("-");
			str.append(to_string(now->tm_mday));
			str.append("-");
			str.append(to_string(now->tm_year + 1900));

			str.append(" Time: ");
			str.append(to_string(now->tm_hour));
			str.append("-");
			str.append(to_string(now->tm_min));
			str.append("-");
			str.append(to_string(now->tm_sec));

			printf("%s", str.c_str());
	} 

 

  return 0;// end of program
}
