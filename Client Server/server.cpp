//PROJECT NAME:TCP Client Server applicaton
//NAME: RAHUL SHINDE         ID:006948956
//COURSE: 511
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//The Server File that operates the client once it is on.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//CHANGE LOG:
//
//INTIALS	         DATE					  CHANGES
//ad			   11/02/2014				basic server
//kj			   11/04/2014				message passing		
//kj		       11/10/2014				handling more than 1 client
//tp			   11/11/2014				date and time 
//rs			   11/12/2014				file listing
// NOTE: use g++ -std=c++11 <filename.cpp> while compiling
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <unistd.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <dirent.h>

using namespace std;

int main()//entry point of the program
{
  int welcomeSocket, newSocket;
  char buffer[1024];
  struct sockaddr_in serverAddr;
  struct sockaddr_storage serverStorage;
  socklen_t addr_size;
  bool toContinue = true;
  int choice;
  time_t t;
  string str = "";
  string ss="";
  struct tm * now;
  DIR *dir;
dirent *pdir;
string directoryContent;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Create the socket. 
//in: 1) Internet domain 2) Stream socket 3) Default protocol (TCP in this case)
//out: socket established.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  welcomeSocket = socket(PF_INET, SOCK_STREAM, 0);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Configure settings of server address struct
//in: Address family = Internet
//out: server family updated
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  serverAddr.sin_family = AF_INET;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Set port number
//in: using htons function to use proper byte order
//out: server port updated
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  serverAddr.sin_port = htons(7891);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Set ip address to local host
//in: "self" ip address 
//out: ip address updated
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Set padding bits
//in: size of server address range
//out: memset updated
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   /
  memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);  

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Binding address to scoket
//in: socket address and welcome socket and size of socket
//out: bind established
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
  bind(welcomeSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Listen to clients if any
//in: check clients if any
//out: resposnds to 0 or more clients
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
  if(listen(welcomeSocket,5)==0)
    printf("Listening\n");
  else
    printf("Error\n");

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Creates a new socket
//in: welcomeSocket and socket address and size
//out:socket established.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
  addr_size = sizeof serverStorage;
  newSocket = accept(welcomeSocket, (struct sockaddr *) &serverStorage, &addr_size);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Descirption:Send message to socket of incoming connection
//in: buffer
//out: socket info and buffer.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

	strcpy(buffer,"Welcome from Server\n");
  send(newSocket,buffer,21,0);

  while(toContinue)
{

	bzero(buffer, 1024);

  cout << endl << "***********************"
	<< endl << "MENU"
	<< endl << "***********************"
	<< endl << "1. Get IP address and port" 
	<< endl << "2. Send Date and Time"
	<< endl << "3. Kill Client"
	<< endl << "4. Get directory listing"
	<< endl << "5. Get Client Date and time"
	<< endl << "0. Exit"
	<< endl << "***********************"
	<< endl << "Enter your choice: ";
	cin >> choice;

	switch(choice){
		case 1: str = ""; //getting ip address and port
			str.append("<1>");
			strcpy(buffer,str.c_str());
  			send(newSocket,buffer,4,0);
			break;

		case 2: str = ""; // Send Date and time of server to client
			t = time(0); 
			now = localtime( & t );
			str.append("<2>");
			str.append(" Date: ");
			str.append(to_string(now->tm_mon + 1));
			str.append("-");
			str.append(to_string(now->tm_mday));
			str.append("-");
			str.append(to_string(now->tm_year + 1900));

			str.append(" Time: ");
			str.append(to_string(now->tm_hour));
			str.append("-");
			str.append(to_string(now->tm_min));
			str.append("-");
			str.append(to_string(now->tm_sec));

			
 			strcpy(buffer,str.c_str());
  			send(newSocket,buffer,36,0);
			break;
		case 3: cout << endl << "Test" << endl;// kills the client
  			strcpy(buffer,"<3>");
  			send(newSocket,buffer,4,0);
			break;
		case 4: str = ""; //list directories of client
			str.append("<4>");
			str.append("\n");
	
			dir = opendir(".");
			if (dir != NULL){
			while (pdir = readdir(dir)){
				str.append("\n");
				str.append(pdir->d_name);
			}
			closedir(dir);
			}

  			strcpy(buffer,str.c_str());
  			send(newSocket,buffer,400,0);
			break;
		case 5: strcpy(buffer,"<5>");// gets client date and time
  			send(newSocket,buffer,4,0);
			break;

		case 0: cout << endl << "Exit" << endl;//exits the program
			strcpy(buffer,"<end>");
  			send(newSocket,buffer,6,0);
			toContinue = false;
			break;
	}

  }
 
  return 0; //end of program
}
